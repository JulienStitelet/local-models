{"successResponse":"{\"document\":[{\"document\":\"\\n\\nchange management\\n\\nmale      Larry      Hatcher      1203 Briarwood Drive      Water Works      NJ      08401      New Jersey      psteirman@aaaabailbonds.com\\n856-416-2368      12/20/2000      21      US\\nResume:\\nProfile Overview\\n*+ years developing Android apps.\\n* **** ********* ** **** store.\\nAdvanced Java and Kotlin programming skill.\\nHands-on with RxJava, RxKotlin, RxAndroid, RxBluetooth, and Coroutines.\\nApply MVVM architecture, MVP architecture, MVC architecture, and SOLID design principles.\\nExperience in planning, designing, developing, and implementing successful large-scale mobile\\nprojects from client requirements to completion.\\nImplemented customized HTTP clients to consume a Web Resource with Retrofit, Volley, OkHTTP, and the\\nnative HttpURLConnection.\\nExperience requirement gathering for Android mobile app projects.\\nRXKotlin, RXJava, RXAndroid, and RXBluetooth experience.\\nExperience in the use of GIT, GitHub for version control on Android projects.\\nExperience in working with Video, Static content, and advertising.\\nExperience interacting with RESTful API and data formats like (JSON, XML, etc.) in an Android\\nenvironment.\\nSolid relational DBMS skills using MySQL, PostgreSQL, or other DBMS products.\\nFluent in Android SDK/NDK and device driver development.\\nAbility to ask the right questions, provide feedback to stakeholders, break down the tasks, and\\ncreate plans to achieve intended results.\\nProven working in Agile (iterative) development (XP, SCRUM, etc.) on Android teams.\\nSet up proper interactions of the front-end design and implementation with backend servers.\\nExtensive experience with source control tools such as CVS, Rational ClearCase, SVN, and Git.\\nExperienced getting Android app approval on the Google Play Store.\\nPublish release packages and records.\\nUse of multiple MBaaS (Mobile Backend as a service) and cloud integration tools like Parse,\\nFirebase, Google Cloud Services, and Amazon Web Services.\\nHands-on with Kotlin Coroutines, LiveData, Android Jetpack, ViewModel, RxJava, Retrofit, Glide,\\nButterKnife., Databiding, Volley, and more.\\nTechnical Skills Table\\nIDEs: Android Studio, NetBeans, Microsoft Visual Studio, Eclipse,\\nIncident Report Tracking: Jira, InstaBug, Firebase Crashlytics\\nTesting Frameworks: Espresso, Mockito, Junit, MonkeyRunner, Robolectric\\nMultithreading: IntentService, AsyncTask, WorkManager, ThreadPoolExecutor, WorkManager, RxJava.\\nKotlin Coroutines, Handler, Looper\\nAndroid UI: Animations, CustomViews, CompoundViews. ConstraintLayout, BottomNavigationView,\\nViewPager, Layout Qualifiers, AnimationDrawable, RecycleView\\nNotifications: Firebase Cloud Messaging, Airship\\nVersion Control Software: SVN, Git, Bitbucket, Visual Source Safe, SourceTree, GitHub, GitLab\\nLanguages: Android SDK, Java, Kotlin, J2EE, JSP, JavaScript\\nLibraries: RxKotlin/Native Libraries, RxJava, Universal Image Downloader, Picasso, Glide, Volley,\\nORMLite, SQLCipher, JUnit, NineOldAndroids, Urban Airship, ViewPagerIndicator, Android System Bar\\nTint library, SecurePreferences, SlidingUpPanel, Crittercism, comScore, Facebook, LiveRail,\\nLeakCanary, GSON, Mosh, Jackson, Retrofit, OkHttp, SimpleContentProvider, Schematic, GCM, Google\\nLocation, Google Maps API, Dagger, Mobile Development, RSA, AES, Retrofit\\nMethodologies: Agile, Waterfall, RUP\\nDatabases: SQLite, MySQL, SQL Server, Oracle, Room, Firebase, Realtime\\nMultimedia: Glide, Picasso, ExoPlayer, TextureVideoView\\nContinuous Integration Tools: Jenkins, CircleCI, Travis\\nWeb Services: RESTful, SOAP, JSON, XML\\nWork Experience\\nMy Molina\\nLong Beach, FL\\n09/2021 - Present\\nSenior Android Application Software Developer\\nhttps://play.google.com/store/apps/details?id\\u003dcom.molina.mobile.myhealthinhand\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nMolina members can sign into the app using their My Molina User ID and Password to access our secure\\nfeatures; view health coverage; view your benefits and eligibility; view/download and share ID card;\\nmake premium payments; manage your payment profile; save favorite doctors; change PCP; access to\\nother services; and more.\\nConfigured app to collect identifiers within Google Firebase to create a unique identifier for each\\napplication when downloaded.\\nCreated Custom Views and animations and implemented Android components to specifications (pre-format\\nand stable).\\nIntegrated ExoPlayer with the app\\u0027s activity lifecycle to support backgrounding, foregrounding, and\\nplayback resumption to view videos.\\nCreated an algorithm that filters user input when the user is entering their birthdate in\\nregistration.\\nMigrated JobService to WorkManager API to sync user information, analytics data with RevenueCat SDK.\\nCreated functional programs to handle adaptive video streams, register event listeners to monitor\\nplayback state and show how listeners can be used to measure the quality of playback.\\nProgrammed in Kotlin and applied a MVVM architecture.\\nUsed the Google Calendar API to achieve deeper integration with Google Calendar and Firebase push\\nnotifications to add medication and appointment reminders.\\nCreated set of programming interfaces using Reactive Streams library to define the transmission of\\nstream elements regulated through back-pressure and perform serialization/deserialization of the\\ndata elements using Google Protocol buffers.\\nIntegrated Stripe Purchases SDK to unlock access to the same subscription content.\\nResolved defects/bugs during QA testing, pre-production, production, and post-release patches.\\nMaintained and improved the CI/CD Jenkins pipeline.\\nPerformed testing procedures using Espresso and Mockito tools.\\nCreated documentation and flow diagrams in Confluence.\\nApplied Kotlin extension functions to efficiently re-use existing codes and reduce code duplication\\nto its bare minimum.\\nPracticed pair programming in support of best-practice Agile development practices.\\nUtilized Espresso for the automated UI testing RecyclerView interactions.\\nUtilized Mockito with Retrofit for mocking the API call (Mockserver).\\nUsed JetPack for Android components to improve back-end management.\\nUsed RecyclerView extensively to display list data from RESTful web services proficiently.\\nUsed Leak Canary to manage, trace and fix memory leaks issue within the Android app.\\nUsed APIs such as GET, POST and PUT to update servers and retrieve information for users.\\nHandled user interactions such as button clicks and page swipes.\\nAssisted with code reviews on every PR to ensure quality code and a stable development process.\\nWorked closely with a present Figma design to bring the developed UI/UX design to life through\\nAndroid Studio.\\nRed Lobster\\nOrlando, FL\\n07/2020 - 09/2021\\nAndroid Software Developer\\nhttps://play.google.com/store/apps/details?id\\u003dcom.cardfree.android.redlobster\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nUse the Red Lobster app to Earn points toward delicious rewards every time you eat at Red Lobster;\\nTake your pick of freebies; Receive notifications about Red Lobster offers and events; Find the\\nclosest Red Lobster; and more...\\nProgramed functions/features in Kotlin.\\nProgrammed Kotlin extensions for commonly used code to reuse it and avoid repeating it everywhere\\nit\\u0027s needed, including loading images into ImageViews, requesting permissions, write/read from\\nshared preferences, among others.\\nMigrated project to AndroidX to use the newest JetPack libraries.\\nUsed databinding to reduce code in fragments and LiveData to handle lifecycle data to only update\\nthe UI when it\\u0027s available.\\nUsed Crashlytics to track user behavior and obtain mobile analytics.\\nBuilt app on MVVM architecture.\\nIntegrated Mapbox SDK to implement a better performing maps experience than the old Google Maps\\nimplementation.\\nWorked with Google Analytics with Tag manager to Firebase analytics.\\nImplemented push notifications features with Firebase\\u0027s Cloud Messaging Service.\\nProvided feedback on the design process for all screens for food ordering and ways to reduce number\\nof taps needed.\\nJoined in the planning of food ordering feature and decide on a direction to go regarding how the\\nmobile apps should communicate.\\nImplemented new designs using InVision prototype to obtain the assets and optimized them for\\nAndroid.\\nImplemented BrainTree SDK for payment processing.\\nMigrated database from DBFlow to Room.\\nYahoo\\nSunnyvale, CA\\n09/2019 - 07/2020\\nAndroid Software Developer\\nhttps://play.google.com/store/apps/details?id\\u003dcom.yahoo.mobile.client.android.weather\\nPrepare for your day with the most accurate hourly, 5-day, and 10-day forecasts. Stunning Flickr\\nphotos match your location, time of day, and current conditions.\\nApplied OO design experience.\\nPerformed build work on a MVP architecture base.\\nProgrammed in Java and Kotlin and began the shift from Java to Kotlin.\\nUsed RxJava for most of the asynchronous processes.\\nImplemented new custom views to replace old ones from the previous version.\\nImplemented Flurry and Google for traffic and usage analytics.\\nUtilized ExoPlayer with a DASH adaptive bit rate streaming technique to show ads and videos of the\\nlocations.\\nWrote code to interact with the RESTful service server, as well as serializing the returned code\\ninto POJOs via the GSON library.\\nConsumed Restful Web service in JSON strings.\\nUsed reactive frameworks such as RxAndroid, RxBluetooth, and RxKotlin.\\nWorked with testing libraries and frameworks JUnit, Espresso, Mockito, and Robolectric.\\nIntegrated with some distribution services - HockeyApp/TestFairy.\\nDeveloped in Java programming language using the Eclipse IDE and the Android Development Tool (ADT).\\nMade use of implicit and explicit intents to access content and other resources from the web.\\nCreated the database using SQLite local file and a Firebase implementation.\\nIntegrated early debug builds with a real-time database built with Firebase.\\nSet up new Jenkins tasks for nightly builds and continuous integration.\\nModified the navigation and replaced activities with Fragments.\\nImplemented the new Material Design capabilities supported in Android Lollipop.\\nUsed Retrofit to handle the API consumption with a Jackson built-in converter.\\nLandry\\u0027s\\nHouston, TX\\n11/2017 - 09/2019\\nAndroid Software Developer\\nhttps://play.google.com/store/apps/details?id\\u003dnet.landrysinc.lac\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nDownload the LSC app to manage your Landry\\u0027s Select Club account, find Landry\\u0027s locations near you,\\nmake reservations, view menus, purchase gift cards and more. Find restaurants nearby or search based\\nupon city, state or zip code; view menus, make reservations and get directions; and more.\\nGenerated app build on a MVP architecture.\\nUsed APIs from different API levels to support backward compatibility.\\nImplemented best practices for Android mobile development with their main components: Activities,\\nServices, Content Providers and Broadcast Receivers.\\nImplemented Push Notifications to notify users when there is a new price update.\\nImplemented newer features in Kotlin and migrated older features coded in Java to Kotlin.\\nEnsured backward compatibility by using Android support libraries.\\nApplied and configured Geo-Fencing capabilities that were built-in with the Google APIs.\\nConfigured multiple analytic tools to get valuable information on a post-install state: Crashlytics,\\nMixpanel.\\nPersisted non-sensitive data with Realm database and ensured that the database was using encryption\\nalgorithms when persisting user information.\\nSecured the database using SQLCipher and Secure Preferences.\\nAdded Flurry for user behavior tracking and quality control over crashes.\\nUsed Android Studio as IDE.\\nCreated unit, integration and stress test cases with JUnit, Espresso, and Monkeyrunner.\\nConfigured the continuous integration process with a Jenkins instance hosted on a private server.\\nUtilized Android and third-party frameworks to use the multithreading capabilities of the physical\\ndevices: AsyncTasks, IntentServices, Handlers, Threads, RXJava instances.\\nPeel Technologies\\nMountainView, CA\\n01/2016 - 10/2017\\nAndroid Developer\\nhttps://play.google.com/store/apps/details?id\\u003dcom.peel.remote.control.universal\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nPeel Smart Remote is always good and easy to use a single universal remote-control device to control\\nall your electronic equipment tired using different different remote control for each electronic\\ndevice. try universal Peel Smart Remote to use all remote control from your android mobile. no need\\nto use different different remote control just use a single app from your phone to handle all your\\ndevice from one remote control.\\nImplemented Dagger to address many of the development and performance issues.\\nManaged quality build process using Jenkins continuous integration, with a Git repository on a\\nprivate Git server. Git was managed using BitBucket on the existing Android app and we migrated the\\nprocess to SourceTree.\\nCreated and developed unit testing, instrumentation testing and automation testing for each new\\nfeature implemented using Junit, Mockito, Roboelectric, Powermock, Espresso, Calabash for Android.\\nUsed Implicit and Explicit Intents.\\nDeveloped Custom Views, Compound Views, and various layouts to construct the complex but\\nuser-friendly user interface.\\nWorked on Starva Bluetooth BLE SDK to design module to pair with Bluetooth devices and transmit\\nlarge bytes of attributes.\\nDesigned the UI layout with Balsamiq Mockups wireframe tool for the apps look and feel.\\nEnsured display and on-screen rotation worked well on all devices and screen, ensuring integrity\\nwith the onSaveInstanceState and onRestoreInstanceState methods.\\nUsed GSON library to deserialize JSON information.\\nHandled Fragment data retention to ensure data integrity in Android on-screen rotation with the\\nonSaveInstanceState and onRestoreInstanceState methods.\\nEngaged with cross-functional teams to define new product requirements, features, and functionality\\nin the app.\\nEducation\\nBachelor of Computer Science from Catawaba College in Salisbury, North Carolina.\\n\\n\\n\"}],\"TK_PRESENTATION\":[{\"html\":\"\\u003cdiv\\u003e\\u003cdiv style\\u003d\\\"position: relative;\\\"\\u003e\\u003ctk_metadata name\\u003d\\\"last_modified\\\" value\\u003d\\\"24/11/2022, 02:37\\\"\\u003e \\u003c/tk_metadata\\u003e\\u003ctk_metadata name\\u003d\\\"author\\\" value\\u003d\\\"Administrator\\\"\\u003e \\u003c/tk_metadata\\u003e \\u003cp\\u003e \\u003c/p\\u003e \\u003cdiv style\\u003d\\\"-webkit-column-count:1;-moz-column-count:1;column-count:1;column-gap:21.25pt;-webkit-column-count:21.25pt;-moz-column-count:21.25pt;\\\"\\u003e \\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:justify;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Times New Roman\\u0026apos;;font-size:10pt;\\\"\\u003echange management\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:justify;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e \\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:justify;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Times New Roman\\u0026apos;;font-size:10pt;\\\"\\u003emale\\t Larry\\t Hatcher\\t 1203 Briarwood Drive\\t Water Works\\t NJ\\t 08401\\t New Jersey\\t psteirman@aaaabailbonds.com\\t 856-416-2368\\t 12/20/2000\\t 21\\t US\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:justify;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:13pt;\\\"\\u003eResume:\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eProfile Overview\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;color:#0000CC;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;color:#0000cc;\\\"\\u003e*\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;color:#000000;\\\"\\u003e+ years developing Android apps.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;color:#0000CC;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;color:#0000cc;\\\"\\u003e* **** ********* ** ****\\u003c/span\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;color:#000000;\\\"\\u003e store.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAdvanced Java and Kotlin programming skill.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eHands-on with RxJava, RxKotlin, RxAndroid, RxBluetooth, and Coroutines.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eApply MVVM architecture, MVP architecture, MVC architecture, and SOLID design principles.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eExperience in planning, designing, developing, and implementing successful large-scale mobile projects from client requirements to completion.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented customized HTTP clients to consume a Web Resource with Retrofit, Volley, OkHTTP, and the native HttpURLConnection.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eExperience requirement gathering for Android mobile app projects.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eRXKotlin, RXJava, RXAndroid, and RXBluetooth experience.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eExperience in the use of GIT, GitHub for version control on Android projects.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eExperience in working with Video, Static content, and advertising.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eExperience interacting with RESTful API and data formats like (JSON, XML, etc.) in an Android environment.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eSolid relational DBMS skills using MySQL, PostgreSQL, or other DBMS products.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eFluent in Android SDK/NDK and device driver development.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAbility to ask the right questions, provide feedback to stakeholders, break down the tasks, and create plans to achieve intended results.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eProven working in Agile (iterative) development (XP, SCRUM, etc.) on Android teams.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eSet up proper interactions of the front-end design and implementation with backend servers.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eExtensive experience with source control tools such as CVS, Rational ClearCase, SVN, and Git.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eExperienced getting Android app approval on the Google Play Store.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePublish release packages and records.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUse of multiple MBaaS (Mobile Backend as a service) and cloud integration tools like Parse, Firebase, Google Cloud Services, and Amazon Web Services.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eHands-on with Kotlin Coroutines, LiveData, Android Jetpack, ViewModel, RxJava, Retrofit, Glide, ButterKnife., Databiding, Volley, and more.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eTechnical Skills Table\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eIDEs: Android Studio, NetBeans, Microsoft Visual Studio, Eclipse,\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eIncident Report Tracking: Jira, InstaBug, Firebase Crashlytics\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eTesting Frameworks: Espresso, Mockito, Junit, MonkeyRunner, Robolectric\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMultithreading: IntentService, AsyncTask, WorkManager, ThreadPoolExecutor, WorkManager, RxJava. Kotlin Coroutines, Handler, Looper\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAndroid UI: Animations, CustomViews, CompoundViews. ConstraintLayout, BottomNavigationView, ViewPager, Layout Qualifiers, AnimationDrawable, RecycleView\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eNotifications: Firebase Cloud Messaging, Airship\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eVersion Control Software: SVN, Git, Bitbucket, Visual Source Safe, SourceTree, GitHub, GitLab\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eLanguages: Android SDK, Java, Kotlin, J2EE, JSP, JavaScript\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eLibraries: RxKotlin/Native Libraries, RxJava, Universal Image Downloader, Picasso, Glide, Volley, ORMLite, SQLCipher, JUnit, NineOldAndroids, Urban Airship, ViewPagerIndicator, Android System Bar Tint library, SecurePreferences, SlidingUpPanel, Crittercism, comScore, Facebook, LiveRail, LeakCanary, GSON, Mosh, Jackson, Retrofit, OkHttp, SimpleContentProvider, Schematic, GCM, Google Location, Google Maps API, Dagger, Mobile Development, RSA, AES, Retrofit\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMethodologies: Agile, Waterfall, RUP\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eDatabases: SQLite, MySQL, SQL Server, Oracle, Room, Firebase, Realtime\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMultimedia: Glide, Picasso, ExoPlayer, TextureVideoView\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eContinuous Integration Tools: Jenkins, CircleCI, Travis\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eWeb Services: RESTful, SOAP, JSON, XML\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eWork Experience\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMy Molina\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eLong Beach, FL\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003e09/2021 - Present\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eSenior Android Application Software Developer\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003ca href\\u003d\\\"https://play.google.com/store/apps/details?id\\u003dcom.molina.mobile.myhealthinhand\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ehttps://play.google.com/store/apps/details?id\\u003dcom.molina.mobile.myhealthinhand\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\u003c/span\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMolina members can sign into the app using their My Molina User ID and Password to access our secure features; view health coverage; view your benefits and eligibility; view/download and share ID card; make premium payments; manage your payment profile; save favorite doctors; \\u003cb\\u003echange\\u003c/b\\u003e PCP; access to other services; and more.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eConfigured app to collect identifiers within Google Firebase to create a unique identifier for each application when downloaded.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated Custom Views and animations and implemented Android components to specifications (pre-format and stable).\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eIntegrated ExoPlayer with the app\\u0026apos;s activity lifecycle to support backgrounding, foregrounding, and playback resumption to view videos.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated an algorithm that filters user input when the user is entering their birthdate in registration.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMigrated JobService to WorkManager API to sync user information, analytics data with RevenueCat SDK.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated functional programs to handle adaptive video streams, register event listeners to monitor playback state and show how listeners can be used to measure the quality of playback.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eProgrammed in Kotlin and applied a MVVM architecture.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed the Google Calendar API to achieve deeper integration with Google Calendar and Firebase push notifications to add medication and appointment reminders.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated set of programming interfaces using Reactive Streams library to define the transmission of stream elements regulated through back-pressure and perform serialization/deserialization of the data elements using Google Protocol buffers.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eIntegrated Stripe Purchases SDK to unlock access to the same subscription content.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eResolved defects/bugs during QA testing, pre-production, production, and post-release patches.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMaintained and improved the CI/CD Jenkins pipeline.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePerformed testing procedures using Espresso and Mockito tools.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated documentation and flow diagrams in Confluence.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eApplied Kotlin extension functions to efficiently re-use existing codes and reduce code duplication to its bare minimum.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePracticed pair programming in support of best-practice Agile development practices.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUtilized Espresso for the automated UI testing RecyclerView interactions.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUtilized Mockito with Retrofit for mocking the API call (Mockserver).\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed JetPack for Android components to improve back-end \\u003cb\\u003emanagement\\u003c/b\\u003e.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed RecyclerView extensively to display list data from RESTful web services proficiently.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed Leak Canary to manage, trace and fix memory leaks issue within the Android app.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed APIs such as GET, POST and PUT to update servers and retrieve information for users.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eHandled user interactions such as button clicks and page swipes.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAssisted with code reviews on every PR to ensure quality code and a stable development process.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eWorked closely with a present Figma design to bring the developed UI/UX design to life through Android Studio.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eRed Lobster\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eOrlando, FL\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003e07/2020 – 09/2021\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAndroid Software Developer\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003ca href\\u003d\\\"https://play.google.com/store/apps/details?id\\u003dcom.cardfree.android.redlobster\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ehttps://play.google.com/store/apps/details?id\\u003dcom.cardfree.android.redlobster\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\u003c/span\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUse the Red Lobster app to Earn points toward delicious rewards every time you eat at Red Lobster; Take your pick of freebies; Receive notifications about Red Lobster offers and events; Find the closest Red Lobster; and more…\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eProgramed functions/features in Kotlin.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eProgrammed Kotlin extensions for commonly used code to reuse it and avoid repeating it everywhere it’s needed, including loading images into ImageViews, requesting permissions, write/read from shared preferences, among others.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMigrated project to AndroidX to use the newest JetPack libraries.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed databinding to reduce code in fragments and LiveData to handle lifecycle data to only update the UI when it’s available.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed Crashlytics to track user behavior and obtain mobile analytics.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eBuilt app on MVVM architecture.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eIntegrated Mapbox SDK to implement a better performing maps experience than the old Google Maps implementation.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eWorked with Google Analytics with Tag manager to Firebase analytics.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented push notifications features with Firebase’s Cloud Messaging Service.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eProvided feedback on the design process for all screens for food ordering and ways to reduce number of taps needed.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eJoined in the planning of food ordering feature and decide on a direction to go regarding how the mobile apps should communicate.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented new designs using InVision prototype to obtain the assets and optimized them for Android.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented BrainTree SDK for payment processing.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMigrated database from DBFlow to Room.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eYahoo\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eSunnyvale, \\u003cb\\u003eCA\\u003c/b\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003e09/2019 – 07/2020\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAndroid Software Developer\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003ca href\\u003d\\\"https://play.google.com/store/apps/details?id\\u003dcom.yahoo.mobile.client.android.weather\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ehttps://play.google.com/store/apps/details?id\\u003dcom.yahoo.mobile.client.android.weather\\u003c/span\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePrepare for your day with the most accurate hourly, 5-day, and 10-day forecasts. Stunning Flickr photos match your location, time of day, and current conditions.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eApplied OO design experience.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePerformed build work on a MVP architecture base.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eProgrammed in Java and Kotlin and began the shift from Java to Kotlin.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed RxJava for most of the asynchronous processes.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented new custom views to replace old ones from the previous version.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented Flurry and Google for traffic and usage analytics.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUtilized ExoPlayer with a DASH adaptive bit rate streaming technique to show ads and videos of the locations.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eWrote code to interact with the RESTful service server, as well as serializing the returned code into POJOs via the GSON library.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eConsumed Restful Web service in JSON strings.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed reactive frameworks such as RxAndroid, RxBluetooth, and RxKotlin.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eWorked with testing libraries and frameworks JUnit, Espresso, Mockito, and Robolectric.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eIntegrated with some distribution services - HockeyApp/TestFairy.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eDeveloped in Java programming language using the Eclipse IDE and the Android Development Tool (ADT).\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMade use of implicit and explicit intents to access content and other resources from the web.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated the database using SQLite local file and a Firebase implementation.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eIntegrated early debug builds with a real-time database built with Firebase.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eSet up new Jenkins tasks for nightly builds and continuous integration.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eModified the navigation and replaced activities with Fragments.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented the new Material Design capabilities supported in Android Lollipop.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed Retrofit to handle the API consumption with a Jackson built-in converter.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eLandry’s\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eHouston, TX\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003e11/2017 – 09/2019\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAndroid Software Developer\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003ca href\\u003d\\\"https://play.google.com/store/apps/details?id\\u003dnet.landrysinc.lac\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ehttps://play.google.com/store/apps/details?id\\u003dnet.landrysinc.lac\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\u003c/span\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eDownload the LSC app to manage your Landry’s Select Club account, find Landry’s locations near you, make reservations, view menus, purchase gift cards and more. Find restaurants nearby or search based upon city, state or zip code; view menus, make reservations and get directions; and more.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eGenerated app build on a MVP architecture.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed APIs from different API levels to support backward compatibility.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented best practices for Android mobile development with their main components: Activities, Services, Content Providers and Broadcast Receivers.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented Push Notifications to notify users when there is a new price update.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented newer features in Kotlin and migrated older features coded in Java to Kotlin.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eEnsured backward compatibility by using Android support libraries.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eApplied and configured Geo-Fencing capabilities that were built-in with the Google APIs.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eConfigured multiple analytic tools to get valuable information on a post-install state: Crashlytics, Mixpanel.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePersisted non-sensitive data with Realm database and ensured that the database was using encryption algorithms when persisting user information.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eSecured the database using SQLCipher and Secure Preferences.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAdded Flurry for user behavior tracking and quality control over crashes.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed Android Studio as IDE.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated unit, integration and stress test cases with JUnit, Espresso, and Monkeyrunner.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eConfigured the continuous integration process with a Jenkins instance hosted on a private server.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUtilized Android and third-party frameworks to use the multithreading capabilities of the physical devices: AsyncTasks, IntentServices, Handlers, Threads, RXJava instances.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePeel Technologies\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eMountainView, \\u003cb\\u003eCA\\u003c/b\\u003e\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003e01/2016 – 10/2017\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eAndroid Developer\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003ca href\\u003d\\\"https://play.google.com/store/apps/details?id\\u003dcom.peel.remote.control.universal\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ehttps://play.google.com/store/apps/details?id\\u003dcom.peel.remote.control.universal\\u0026amp;hl\\u003den_CA\\u0026amp;gl\\u003dUS\\u003c/span\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003ePeel Smart Remote is always good and easy to use a single universal remote-control device to control all your electronic equipment tired using different different remote control for each electronic device. try universal Peel Smart Remote to use all remote control from your android mobile. no need to use different different remote control just use a single app from your phone to handle all your device from one remote control.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eImplemented Dagger to address many of the development and performance issues.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eManaged quality build process using Jenkins continuous integration, with a Git repository on a private Git server. Git was managed using BitBucket on the existing Android app and we migrated the process to SourceTree.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eCreated and developed unit testing, instrumentation testing and automation testing for each new feature implemented using Junit, Mockito, Roboelectric, Powermock, Espresso, Calabash for Android.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed Implicit and Explicit Intents.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eDeveloped Custom Views, Compound Views, and various layouts to construct the complex but user-friendly user interface.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eWorked on Starva Bluetooth BLE SDK to design module to pair with Bluetooth devices and transmit large bytes of attributes.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eDesigned the UI layout with Balsamiq Mockups wireframe tool for the apps look and feel.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eEnsured display and on-screen rotation worked well on all devices and screen, ensuring integrity with the onSaveInstanceState and onRestoreInstanceState methods.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eUsed GSON library to deserialize JSON information.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eHandled Fragment data retention to ensure data integrity in Android on-screen rotation with the onSaveInstanceState and onRestoreInstanceState methods.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eEngaged with cross-functional teams to define new product requirements, features, and functionality in the app.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eEducation\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:left;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e\\u003cspan style\\u003d\\\"font-family:\\u0026apos;Arial\\u0026apos;;font-size:8pt;\\\"\\u003eBachelor of Computer Science from Catawaba College in Salisbury, North Carolina.\\u003c/span\\u003e\\u003c/p\\u003e\\n\\u003cp style\\u003d\\\"white-space:pre-wrap;text-align:justify;margin-top:0.00in;margin-bottom:0.00in;\\\"\\u003e \\u003c/p\\u003e \\u003c/div\\u003e\\u003c/div\\u003e\\u003c/div\\u003e\\n\"}],\"Document\":[{\"iscv\":\"yes\"}],\"givenname\":[{\"givenname\":\"Larry\"}],\"full_lastname\":[{\"full_lastname\":\"Hatcher\"}],\"gendernamedisambig\":[{\"gendernamedisambig\":\"male\"}],\"ansi_linked_dateofbirth\":[{\"ansi_linked_dateofbirth\":\"2000-12-20\"}],\"email\":[{\"email\":\"psteirman@aaaabailbonds.com\"}],\"homephone\":[{\"homephone\":\"856-416-2368\"}],\"mobilephone\":[{\"mobilephone\":\"856-416-2368\"}],\"tk_countrycode_regionclue\":[{\"region_code\":\"US-NJ\"}],\"countrycode\":[{\"countrycode\":\"US\"}],\"city\":[{\"city\":\"Water Works\"}],\"addressline\":[{\"addressline\":\"1203 Briarwood Drive\"}],\"address\":[{\"region\":\"NJ\"}],\"countrycode_nodefault\":[{\"countrycode_nodefault\":\"US\"}],\"postcode\":[{\"postcode\":\"08401\"}],\"experienceitem\":[{\"experiencecity\":\"Long Beach\",\"experienceregion\":\"FL\",\"experiencecountry_english\":\"United States\",\"experience\":\"Senior Android Application Software Developer\",\"ansi_linked_experiencebegin_nowstring\":\"2021-09-01\",\"ansi_linked_experienceend_nowstring\":\"__NOWSTRING__\",\"experienceorg\":\"My Molina\",\"expdescriptionblock\":\"https://play.google.com/store/apps/details?id\\u003dcom.molina.mobile.myhealthinhand\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nMolina members can sign into the app using their My Molina User ID and Password to access our secure\\nfeatures; view health coverage; view your benefits and eligibility; view/download and share ID card;\\nmake premium payments; manage your payment profile; save favorite doctors; change PCP; access to\\nother services; and more.\\nConfigured app to collect identifiers within Google Firebase to create a unique identifier for each\\napplication when downloaded.\\nCreated Custom Views and animations and implemented Android components to specifications (pre-format\\nand stable).\\nIntegrated ExoPlayer with the app\\u0027s activity lifecycle to support backgrounding, foregrounding, and\\nplayback resumption to view videos.\\nCreated an algorithm that filters user input when the user is entering their birthdate in\\nregistration.\\nMigrated JobService to WorkManager API to sync user information, analytics data with RevenueCat SDK.\\nCreated functional programs to handle adaptive video streams, register event listeners to monitor\\nplayback state and show how listeners can be used to measure the quality of playback.\\nProgrammed in Kotlin and applied a MVVM architecture.\\nUsed the Google Calendar API to achieve deeper integration with Google Calendar and Firebase push\\nnotifications to add medication and appointment reminders.\\nCreated set of programming interfaces using Reactive Streams library to define the transmission of\\nstream elements regulated through back-pressure and perform serialization/deserialization of the\\ndata elements using Google Protocol buffers.\\nIntegrated Stripe Purchases SDK to unlock access to the same subscription content.\\nResolved defects/bugs during QA testing, pre-production, production, and post-release patches.\\nMaintained and improved the CI/CD Jenkins pipeline.\\nPerformed testing procedures using Espresso and Mockito tools.\\nCreated documentation and flow diagrams in Confluence.\\nApplied Kotlin extension functions to efficiently re-use existing codes and reduce code duplication\\nto its bare minimum.\\nPracticed pair programming in support of best-practice Agile development practices.\\nUtilized Espresso for the automated UI testing RecyclerView interactions.\\nUtilized Mockito with Retrofit for mocking the API call (Mockserver).\\nUsed JetPack for Android components to improve back-end management.\\nUsed RecyclerView extensively to display list data from RESTful web services proficiently.\\nUsed Leak Canary to manage, trace and fix memory leaks issue within the Android app.\\nUsed APIs such as GET, POST and PUT to update servers and retrieve information for users.\\nHandled user interactions such as button clicks and page swipes.\\nAssisted with code reviews on every PR to ensure quality code and a stable development process.\\nWorked closely with a present Figma design to bring the developed UI/UX design to life through\\nAndroid Studio.\",\"jobtype\":\"fulltime\",\"iscurrentitem\":\"1\",\"experienceitem\":\"My Molina Long Beach, FL 09/2021 - Present Senior Android Application Software Developer https://play.google.com/store/apps/details?id\\u003dcom.molina.mobile.myhealthinhand\\u0026hl\\u003den_CA\\u0026gl\\u003dUS Molina members can sign into the app using their My Molina User ID and Password to access our secure features; view health coverage; view your benefits and eligibility; view/download and share ID card; make premium payments; manage your payment profile; save favorite doctors; change PCP; access to other services; and more. Configured app to collect identifiers within Google Firebase to create a unique identifier for each application when downloaded. Created Custom Views and animations and implemented Android components to specifications (pre-format and stable). Integrated ExoPlayer with the app\\u0027s activity lifecycle to support backgrounding, foregrounding, and playback resumption to view videos. Created an algorithm that filters user input when the user is entering their birthdate in registration. Migrated JobService to WorkManager API to sync user information, analytics data with RevenueCat SDK. Created functional programs to handle adaptive video streams, register event listeners to monitor playback state and show how listeners can be used to measure the quality of playback. Programmed in Kotlin and applied a MVVM architecture. Used the Google Calendar API to achieve deeper integration with Google Calendar and Firebase push notifications to add medication and appointment reminders. Created set of programming interfaces using Reactive Streams library to define the transmission of stream elements regulated through back-pressure and perform serialization/deserialization of the data elements using Google Protocol buffers. Integrated Stripe Purchases SDK to unlock access to the same subscription content. Resolved defects/bugs during QA testing, pre-production, production, and post-release patches. Maintained and improved the CI/CD Jenkins pipeline. Performed testing procedures using Espresso and Mockito tools. Created documentation and flow diagrams in Confluence. Applied Kotlin extension functions to efficiently re-use existing codes and reduce code duplication to its bare minimum. Practiced pair programming in support of best-practice Agile development practices. Utilized Espresso for the automated UI testing RecyclerView interactions. Utilized Mockito with Retrofit for mocking the API call (Mockserver). Used JetPack for Android components to improve back-end management. Used RecyclerView extensively to display list data from RESTful web services proficiently. Used Leak Canary to manage, trace and fix memory leaks issue within the Android app. Used APIs such as GET, POST and PUT to update servers and retrieve information for users. Handled user interactions such as button clicks and page swipes. Assisted with code reviews on every PR to ensure quality code and a stable development process. Worked closely with a present Figma design to bring the developed UI/UX design to life through Android Studio.\",\"experiencemonths\":\"15\"},{\"experiencecity\":\"Orlando\",\"experienceregion\":\"FL\",\"experiencecountry_english\":\"United States\",\"experience\":\"Android Software Developer\",\"ansi_linked_experiencebegin_nowstring\":\"2020-07-01\",\"ansi_linked_experienceend_nowstring\":\"2021-09-01\",\"experienceorg\":\"Red Lobster\",\"expdescriptionblock\":\"https://play.google.com/store/apps/details?id\\u003dcom.cardfree.android.redlobster\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nUse the Red Lobster app to Earn points toward delicious rewards every time you eat at Red Lobster;\\nTake your pick of freebies; Receive notifications about Red Lobster offers and events; Find the\\nclosest Red Lobster; and more...\\nProgramed functions/features in Kotlin.\\nProgrammed Kotlin extensions for commonly used code to reuse it and avoid repeating it everywhere\\nit\\u0027s needed, including loading images into ImageViews, requesting permissions, write/read from\\nshared preferences, among others.\\nMigrated project to AndroidX to use the newest JetPack libraries.\\nUsed databinding to reduce code in fragments and LiveData to handle lifecycle data to only update\\nthe UI when it\\u0027s available.\\nUsed Crashlytics to track user behavior and obtain mobile analytics.\\nBuilt app on MVVM architecture.\\nIntegrated Mapbox SDK to implement a better performing maps experience than the old Google Maps\\nimplementation.\\nWorked with Google Analytics with Tag manager to Firebase analytics.\\nImplemented push notifications features with Firebase\\u0027s Cloud Messaging Service.\\nProvided feedback on the design process for all screens for food ordering and ways to reduce number\\nof taps needed.\\nJoined in the planning of food ordering feature and decide on a direction to go regarding how the\\nmobile apps should communicate.\\nImplemented new designs using InVision prototype to obtain the assets and optimized them for\\nAndroid.\\nImplemented BrainTree SDK for payment processing.\\nMigrated database from DBFlow to Room.\",\"jobtype\":\"fulltime\",\"experienceitem\":\"Red Lobster Orlando, FL 07/2020 - 09/2021 Android Software Developer https://play.google.com/store/apps/details?id\\u003dcom.cardfree.android.redlobster\\u0026hl\\u003den_CA\\u0026gl\\u003dUS Use the Red Lobster app to Earn points toward delicious rewards every time you eat at Red Lobster; Take your pick of freebies; Receive notifications about Red Lobster offers and events; Find the closest Red Lobster; and more... Programed functions/features in Kotlin. Programmed Kotlin extensions for commonly used code to reuse it and avoid repeating it everywhere it\\u0027s needed, including loading images into ImageViews, requesting permissions, write/read from shared preferences, among others. Migrated project to AndroidX to use the newest JetPack libraries. Used databinding to reduce code in fragments and LiveData to handle lifecycle data to only update the UI when it\\u0027s available. Used Crashlytics to track user behavior and obtain mobile analytics. Built app on MVVM architecture. Integrated Mapbox SDK to implement a better performing maps experience than the old Google Maps implementation. Worked with Google Analytics with Tag manager to Firebase analytics. Implemented push notifications features with Firebase\\u0027s Cloud Messaging Service. Provided feedback on the design process for all screens for food ordering and ways to reduce number of taps needed. Joined in the planning of food ordering feature and decide on a direction to go regarding how the mobile apps should communicate. Implemented new designs using InVision prototype to obtain the assets and optimized them for Android. Implemented BrainTree SDK for payment processing. Migrated database from DBFlow to Room.\",\"experiencemonths\":\"15\"},{\"experiencecity\":\"Sunnyvale\",\"experienceregion\":\"CA\",\"experiencecountry_english\":\"United States\",\"experience\":\"Android Software Developer\",\"ansi_linked_experiencebegin_nowstring\":\"2019-09-01\",\"ansi_linked_experienceend_nowstring\":\"2020-07-01\",\"experienceorg\":\"Yahoo\",\"expdescriptionblock\":\"https://play.google.com/store/apps/details?id\\u003dcom.yahoo.mobile.client.android.weather\\nPrepare for your day with the most accurate hourly, 5-day, and 10-day forecasts. Stunning Flickr\\nphotos match your location, time of day, and current conditions.\\nApplied OO design experience.\\nPerformed build work on a MVP architecture base.\\nProgrammed in Java and Kotlin and began the shift from Java to Kotlin.\\nUsed RxJava for most of the asynchronous processes.\\nImplemented new custom views to replace old ones from the previous version.\\nImplemented Flurry and Google for traffic and usage analytics.\\nUtilized ExoPlayer with a DASH adaptive bit rate streaming technique to show ads and videos of the\\nlocations.\\nWrote code to interact with the RESTful service server, as well as serializing the returned code\\ninto POJOs via the GSON library.\\nConsumed Restful Web service in JSON strings.\\nUsed reactive frameworks such as RxAndroid, RxBluetooth, and RxKotlin.\\nWorked with testing libraries and frameworks JUnit, Espresso, Mockito, and Robolectric.\\nIntegrated with some distribution services - HockeyApp/TestFairy.\\nDeveloped in Java programming language using the Eclipse IDE and the Android Development Tool (ADT).\\nMade use of implicit and explicit intents to access content and other resources from the web.\\nCreated the database using SQLite local file and a Firebase implementation.\\nIntegrated early debug builds with a real-time database built with Firebase.\\nSet up new Jenkins tasks for nightly builds and continuous integration.\\nModified the navigation and replaced activities with Fragments.\\nImplemented the new Material Design capabilities supported in Android Lollipop.\\nUsed Retrofit to handle the API consumption with a Jackson built-in converter.\",\"jobtype\":\"fulltime\",\"experienceitem\":\"Yahoo Sunnyvale, CA 09/2019 - 07/2020 Android Software Developer https://play.google.com/store/apps/details?id\\u003dcom.yahoo.mobile.client.android.weather Prepare for your day with the most accurate hourly, 5-day, and 10-day forecasts. Stunning Flickr photos match your location, time of day, and current conditions. Applied OO design experience. Performed build work on a MVP architecture base. Programmed in Java and Kotlin and began the shift from Java to Kotlin. Used RxJava for most of the asynchronous processes. Implemented new custom views to replace old ones from the previous version. Implemented Flurry and Google for traffic and usage analytics. Utilized ExoPlayer with a DASH adaptive bit rate streaming technique to show ads and videos of the locations. Wrote code to interact with the RESTful service server, as well as serializing the returned code into POJOs via the GSON library. Consumed Restful Web service in JSON strings. Used reactive frameworks such as RxAndroid, RxBluetooth, and RxKotlin. Worked with testing libraries and frameworks JUnit, Espresso, Mockito, and Robolectric. Integrated with some distribution services - HockeyApp/TestFairy. Developed in Java programming language using the Eclipse IDE and the Android Development Tool (ADT). Made use of implicit and explicit intents to access content and other resources from the web. Created the database using SQLite local file and a Firebase implementation. Integrated early debug builds with a real-time database built with Firebase. Set up new Jenkins tasks for nightly builds and continuous integration. Modified the navigation and replaced activities with Fragments. Implemented the new Material Design capabilities supported in Android Lollipop. Used Retrofit to handle the API consumption with a Jackson built-in converter.\",\"experiencemonths\":\"11\"},{\"experiencecity\":\"Houston\",\"experienceregion\":\"TX\",\"experiencecountry_english\":\"United States\",\"experience\":\"Android Software Developer\",\"ansi_linked_experiencebegin_nowstring\":\"2017-11-01\",\"ansi_linked_experienceend_nowstring\":\"2019-09-01\",\"experienceorg\":\"Landry\\u0027s\",\"expdescriptionblock\":\"https://play.google.com/store/apps/details?id\\u003dnet.landrysinc.lac\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nDownload the LSC app to manage your Landry\\u0027s Select Club account, find Landry\\u0027s locations near you,\\nmake reservations, view menus, purchase gift cards and more. Find restaurants nearby or search based\\nupon city, state or zip code; view menus, make reservations and get directions; and more.\\nGenerated app build on a MVP architecture.\\nUsed APIs from different API levels to support backward compatibility.\\nImplemented best practices for Android mobile development with their main components: Activities,\\nServices, Content Providers and Broadcast Receivers.\\nImplemented Push Notifications to notify users when there is a new price update.\\nImplemented newer features in Kotlin and migrated older features coded in Java to Kotlin.\\nEnsured backward compatibility by using Android support libraries.\\nApplied and configured Geo-Fencing capabilities that were built-in with the Google APIs.\\nConfigured multiple analytic tools to get valuable information on a post-install state: Crashlytics,\\nMixpanel.\\nPersisted non-sensitive data with Realm database and ensured that the database was using encryption\\nalgorithms when persisting user information.\\nSecured the database using SQLCipher and Secure Preferences.\\nAdded Flurry for user behavior tracking and quality control over crashes.\\nUsed Android Studio as IDE.\\nCreated unit, integration and stress test cases with JUnit, Espresso, and Monkeyrunner.\\nConfigured the continuous integration process with a Jenkins instance hosted on a private server.\\nUtilized Android and third-party frameworks to use the multithreading capabilities of the physical\\ndevices: AsyncTasks, IntentServices, Handlers, Threads, RXJava instances.\",\"jobtype\":\"fulltime\",\"experienceitem\":\"Landry\\u0027s Houston, TX 11/2017 - 09/2019 Android Software Developer https://play.google.com/store/apps/details?id\\u003dnet.landrysinc.lac\\u0026hl\\u003den_CA\\u0026gl\\u003dUS Download the LSC app to manage your Landry\\u0027s Select Club account, find Landry\\u0027s locations near you, make reservations, view menus, purchase gift cards and more. Find restaurants nearby or search based upon city, state or zip code; view menus, make reservations and get directions; and more. Generated app build on a MVP architecture. Used APIs from different API levels to support backward compatibility. Implemented best practices for Android mobile development with their main components: Activities, Services, Content Providers and Broadcast Receivers. Implemented Push Notifications to notify users when there is a new price update. Implemented newer features in Kotlin and migrated older features coded in Java to Kotlin. Ensured backward compatibility by using Android support libraries. Applied and configured Geo-Fencing capabilities that were built-in with the Google APIs. Configured multiple analytic tools to get valuable information on a post-install state: Crashlytics, Mixpanel. Persisted non-sensitive data with Realm database and ensured that the database was using encryption algorithms when persisting user information. Secured the database using SQLCipher and Secure Preferences. Added Flurry for user behavior tracking and quality control over crashes. Used Android Studio as IDE. Created unit, integration and stress test cases with JUnit, Espresso, and Monkeyrunner. Configured the continuous integration process with a Jenkins instance hosted on a private server. Utilized Android and third-party frameworks to use the multithreading capabilities of the physical devices: AsyncTasks, IntentServices, Handlers, Threads, RXJava instances.\",\"experiencemonths\":\"23\"},{\"experiencecity\":\"MountainView\",\"experienceregion\":\"CA\",\"experiencecountry_english\":\"United States\",\"experience\":\"Android Developer\",\"ansi_linked_experiencebegin_nowstring\":\"2016-01-01\",\"ansi_linked_experienceend_nowstring\":\"2017-10-31\",\"experienceorg\":\"Peel Technologies\",\"expdescriptionblock\":\"https://play.google.com/store/apps/details?id\\u003dcom.peel.remote.control.universal\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nPeel Smart Remote is always good and easy to use a single universal remote-control device to control\\nall your electronic equipment tired using different different remote control for each electronic\\ndevice. try universal Peel Smart Remote to use all remote control from your android mobile. no need\\nto use different different remote control just use a single app from your phone to handle all your\\ndevice from one remote control.\\nImplemented Dagger to address many of the development and performance issues.\\nManaged quality build process using Jenkins continuous integration, with a Git repository on a\\nprivate Git server. Git was managed using BitBucket on the existing Android app and we migrated the\\nprocess to SourceTree.\\nCreated and developed unit testing, instrumentation testing and automation testing for each new\\nfeature implemented using Junit, Mockito, Roboelectric, Powermock, Espresso, Calabash for Android.\\nUsed Implicit and Explicit Intents.\\nDeveloped Custom Views, Compound Views, and various layouts to construct the complex but\\nuser-friendly user interface.\\nWorked on Starva Bluetooth BLE SDK to design module to pair with Bluetooth devices and transmit\\nlarge bytes of attributes.\\nDesigned the UI layout with Balsamiq Mockups wireframe tool for the apps look and feel.\\nEnsured display and on-screen rotation worked well on all devices and screen, ensuring integrity\\nwith the onSaveInstanceState and onRestoreInstanceState methods.\\nUsed GSON library to deserialize JSON information.\\nHandled Fragment data retention to ensure data integrity in Android on-screen rotation with the\\nonSaveInstanceState and onRestoreInstanceState methods.\\nEngaged with cross-functional teams to define new product requirements, features, and functionality\\nin the app.\",\"jobtype\":\"fulltime\",\"experienceitem\":\"Peel Technologies MountainView, CA 01/2016 - 10/2017 Android Developer https://play.google.com/store/apps/details?id\\u003dcom.peel.remote.control.universal\\u0026hl\\u003den_CA\\u0026gl\\u003dUS Peel Smart Remote is always good and easy to use a single universal remote-control device to control all your electronic equipment tired using different different remote control for each electronic device. try universal Peel Smart Remote to use all remote control from your android mobile. no need to use different different remote control just use a single app from your phone to handle all your device from one remote control. Implemented Dagger to address many of the development and performance issues. Managed quality build process using Jenkins continuous integration, with a Git repository on a private Git server. Git was managed using BitBucket on the existing Android app and we migrated the process to SourceTree. Created and developed unit testing, instrumentation testing and automation testing for each new feature implemented using Junit, Mockito, Roboelectric, Powermock, Espresso, Calabash for Android. Used Implicit and Explicit Intents. Developed Custom Views, Compound Views, and various layouts to construct the complex but user-friendly user interface. Worked on Starva Bluetooth BLE SDK to design module to pair with Bluetooth devices and transmit large bytes of attributes. Designed the UI layout with Balsamiq Mockups wireframe tool for the apps look and feel. Ensured display and on-screen rotation worked well on all devices and screen, ensuring integrity with the onSaveInstanceState and onRestoreInstanceState methods. Used GSON library to deserialize JSON information. Handled Fragment data retention to ensure data integrity in Android on-screen rotation with the onSaveInstanceState and onRestoreInstanceState methods. Engaged with cross-functional teams to define new product requirements, features, and functionality in the app.\",\"experiencemonths\":\"22\"}],\"educationitem\":[{\"degreecity\":\"Salisbury\",\"degreeregion\":\"NC\",\"degreecountry_english\":\"United States\",\"degreeinst\":\"Catawaba College\",\"degreedirection\":\"Bachelor of Computer Science\",\"degreemajor\":\"Computer Science\",\"degreetype\":\"Bachelor\\u0027s Degree\",\"educationitem\":\"Bachelor of Computer Science from Catawaba College in Salisbury, North Carolina.\",\"degree_international\":\"3\"}],\"totalexperiencemonths\":[{\"totalexperiencemonths\":\"83\"}],\"highesteducationitem\":[{\"degreecity\":\"Salisbury\",\"degreeregion\":\"NC\",\"degreecountry_english\":\"United States\",\"degreeinst\":\"Catawaba College\",\"degreedirection\":\"Bachelor of Computer Science\",\"degreemajor\":\"Computer Science\",\"degreetype\":\"Bachelor\\u0027s Degree\",\"educationitem\":\"Bachelor of Computer Science from Catawaba College in Salisbury, North Carolina.\",\"degree_international\":\"3\"}],\"lastitemwithjobtitle\":[{\"experiencecity\":\"Long Beach\",\"experienceregion\":\"FL\",\"experiencecountry_english\":\"United States\",\"experience\":\"Senior Android Application Software Developer\",\"ansi_linked_experiencebegin_nowstring\":\"2021-09-01\",\"ansi_linked_experienceend_nowstring\":\"__NOWSTRING__\",\"experienceorg\":\"My Molina\",\"expdescriptionblock\":\"https://play.google.com/store/apps/details?id\\u003dcom.molina.mobile.myhealthinhand\\u0026hl\\u003den_CA\\u0026gl\\u003dUS\\nMolina members can sign into the app using their My Molina User ID and Password to access our secure\\nfeatures; view health coverage; view your benefits and eligibility; view/download and share ID card;\\nmake premium payments; manage your payment profile; save favorite doctors; change PCP; access to\\nother services; and more.\\nConfigured app to collect identifiers within Google Firebase to create a unique identifier for each\\napplication when downloaded.\\nCreated Custom Views and animations and implemented Android components to specifications (pre-format\\nand stable).\\nIntegrated ExoPlayer with the app\\u0027s activity lifecycle to support backgrounding, foregrounding, and\\nplayback resumption to view videos.\\nCreated an algorithm that filters user input when the user is entering their birthdate in\\nregistration.\\nMigrated JobService to WorkManager API to sync user information, analytics data with RevenueCat SDK.\\nCreated functional programs to handle adaptive video streams, register event listeners to monitor\\nplayback state and show how listeners can be used to measure the quality of playback.\\nProgrammed in Kotlin and applied a MVVM architecture.\\nUsed the Google Calendar API to achieve deeper integration with Google Calendar and Firebase push\\nnotifications to add medication and appointment reminders.\\nCreated set of programming interfaces using Reactive Streams library to define the transmission of\\nstream elements regulated through back-pressure and perform serialization/deserialization of the\\ndata elements using Google Protocol buffers.\\nIntegrated Stripe Purchases SDK to unlock access to the same subscription content.\\nResolved defects/bugs during QA testing, pre-production, production, and post-release patches.\\nMaintained and improved the CI/CD Jenkins pipeline.\\nPerformed testing procedures using Espresso and Mockito tools.\\nCreated documentation and flow diagrams in Confluence.\\nApplied Kotlin extension functions to efficiently re-use existing codes and reduce code duplication\\nto its bare minimum.\\nPracticed pair programming in support of best-practice Agile development practices.\\nUtilized Espresso for the automated UI testing RecyclerView interactions.\\nUtilized Mockito with Retrofit for mocking the API call (Mockserver).\\nUsed JetPack for Android components to improve back-end management.\\nUsed RecyclerView extensively to display list data from RESTful web services proficiently.\\nUsed Leak Canary to manage, trace and fix memory leaks issue within the Android app.\\nUsed APIs such as GET, POST and PUT to update servers and retrieve information for users.\\nHandled user interactions such as button clicks and page swipes.\\nAssisted with code reviews on every PR to ensure quality code and a stable development process.\\nWorked closely with a present Figma design to bring the developed UI/UX design to life through\\nAndroid Studio.\",\"experienceitem\":\"My Molina Long Beach, FL 09/2021 - Present Senior Android Application Software Developer https://play.google.com/store/apps/details?id\\u003dcom.molina.mobile.myhealthinhand\\u0026hl\\u003den_CA\\u0026gl\\u003dUS Molina members can sign into the app using their My Molina User ID and Password to access our secure features; view health coverage; view your benefits and eligibility; view/download and share ID card; make premium payments; manage your payment profile; save favorite doctors; change PCP; access to other services; and more. Configured app to collect identifiers within Google Firebase to create a unique identifier for each application when downloaded. Created Custom Views and animations and implemented Android components to specifications (pre-format and stable). Integrated ExoPlayer with the app\\u0027s activity lifecycle to support backgrounding, foregrounding, and playback resumption to view videos. Created an algorithm that filters user input when the user is entering their birthdate in registration. Migrated JobService to WorkManager API to sync user information, analytics data with RevenueCat SDK. Created functional programs to handle adaptive video streams, register event listeners to monitor playback state and show how listeners can be used to measure the quality of playback. Programmed in Kotlin and applied a MVVM architecture. Used the Google Calendar API to achieve deeper integration with Google Calendar and Firebase push notifications to add medication and appointment reminders. Created set of programming interfaces using Reactive Streams library to define the transmission of stream elements regulated through back-pressure and perform serialization/deserialization of the data elements using Google Protocol buffers. Integrated Stripe Purchases SDK to unlock access to the same subscription content. Resolved defects/bugs during QA testing, pre-production, production, and post-release patches. Maintained and improved the CI/CD Jenkins pipeline. Performed testing procedures using Espresso and Mockito tools. Created documentation and flow diagrams in Confluence. Applied Kotlin extension functions to efficiently re-use existing codes and reduce code duplication to its bare minimum. Practiced pair programming in support of best-practice Agile development practices. Utilized Espresso for the automated UI testing RecyclerView interactions. Utilized Mockito with Retrofit for mocking the API call (Mockserver). Used JetPack for Android components to improve back-end management. Used RecyclerView extensively to display list data from RESTful web services proficiently. Used Leak Canary to manage, trace and fix memory leaks issue within the Android app. Used APIs such as GET, POST and PUT to update servers and retrieve information for users. Handled user interactions such as button clicks and page swipes. Assisted with code reviews on every PR to ensure quality code and a stable development process. Worked closely with a present Figma design to bring the developed UI/UX design to life through Android Studio.\",\"experiencemonths\":\"15\"}],\"nationality\":[{\"nationality_code\":\"RU\"}],\"validated_compskill\":[{\"ansi_linked_first_used_nowstring\":\"2017-11-01\",\"ansi_linked_last_used_nowstring\":\"2020-07-01\",\"duration_derived_months\":\"33\",\"validated_compskill\":\"Java\"},{\"validated_compskill\":\"Coroutines\"},{\"ansi_linked_first_used_nowstring\":\"2016-01-01\",\"ansi_linked_last_used_nowstring\":\"__NOWSTRING__\",\"duration_derived_months\":\"83\",\"validated_compskill\":\"Android\"},{\"validated_compskill\":\"Databiding\"},{\"validated_compskill\":\"NetBeans\"},{\"validated_compskill\":\"Eclipse\"},{\"validated_compskill\":\"MonkeyRunner\"},{\"validated_compskill\":\"GitLab Languages\"},{\"ansi_linked_first_used_nowstring\":\"2017-11-01\",\"ansi_linked_last_used_nowstring\":\"__NOWSTRING__\",\"duration_derived_months\":\"61\",\"validated_compskill\":\"Kotlin\"},{\"validated_compskill\":\"JSP\"},{\"validated_compskill\":\"NineOldAndroids\"},{\"validated_compskill\":\"Urban Airship\"},{\"ansi_linked_first_used_nowstring\":\"2016-01-01\",\"ansi_linked_last_used_nowstring\":\"__NOWSTRING__\",\"duration_derived_months\":\"70\",\"validated_compskill\":\"Jenkins\"},{\"ansi_linked_first_used_nowstring\":\"2021-09-01\",\"ansi_linked_last_used_nowstring\":\"__NOWSTRING__\",\"duration_derived_months\":\"15\",\"validated_compskill\":\"RecyclerView\"},{\"ansi_linked_first_used_nowstring\":\"2019-09-01\",\"ansi_linked_last_used_nowstring\":\"2020-07-01\",\"duration_derived_months\":\"11\",\"validated_compskill\":\"real-time database\"},{\"ansi_linked_first_used_nowstring\":\"2016-01-01\",\"ansi_linked_last_used_nowstring\":\"2020-07-01\",\"duration_derived_months\":\"55\",\"validated_compskill\":\"continuous integration\"},{\"ansi_linked_first_used_nowstring\":\"2019-09-01\",\"ansi_linked_last_used_nowstring\":\"2020-07-01\",\"duration_derived_months\":\"11\",\"validated_compskill\":\"Material Design\"},{\"ansi_linked_first_used_nowstring\":\"2017-11-01\",\"ansi_linked_last_used_nowstring\":\"2019-09-01\",\"duration_derived_months\":\"23\",\"validated_compskill\":\"Mixpanel\"},{\"ansi_linked_first_used_nowstring\":\"2016-01-01\",\"ansi_linked_last_used_nowstring\":\"2017-10-31\",\"duration_derived_months\":\"22\",\"validated_compskill\":\"unit testing\"},{\"ansi_linked_first_used_nowstring\":\"2016-01-01\",\"ansi_linked_last_used_nowstring\":\"2017-10-31\",\"duration_derived_months\":\"22\",\"validated_compskill\":\"Powermock\"}],\"langskill\":[{\"langskill\":\"Android\",\"level\":\"Fluent\"},{\"langskill\":\"English\",\"langskill_code\":\"EN\"}],\"language\":[{\"language\":\"english\"}]}","service":"TK_RESUME","insertionTime":1669257920794}